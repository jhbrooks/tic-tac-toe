var search_data = {"index":{"searchIndex":["board","computerai","game","player","state","available_moves()","best_moves()","best_score()","board_graphic()","default_new()","full?()","graphic()","look_ahead()","new()","new()","new()","new()","play_with_foresight()","random_move()","score_and_revert()","square()","start()","tie?()","update()","update_board()","win?()","readme"],"longSearchIndex":["board","computerai","game","player","state","state#available_moves()","computerai#best_moves()","computerai#best_score()","state#board_graphic()","game::default_new()","board#full?()","board#graphic()","computerai#look_ahead()","board::new()","game::new()","player::new()","state::new()","computerai#play_with_foresight()","computerai#random_move()","computerai#score_and_revert()","board#square()","game#start()","state#tie?()","board#update()","state#update_board()","state#win?()",""],"info":[["Board","","Board.html","","<p>This class handles board information\n"],["ComputerAI","","ComputerAI.html","","<p>This module handles computer AI for a game (currently tested for Tic Tac\nToe)\n<p>For Tic Tac Toe, for boards …\n"],["Game","","Game.html","","<p>This class operates a Tic Tac Toe game\n"],["Player","","Player.html","","<p>This class handles player information\n<p>type should be :human or :computer (others will result in computer …\n"],["State","","State.html","","<p>This class handles game state information\n"],["available_moves","State","State.html#method-i-available_moves","()",""],["best_moves","ComputerAI","ComputerAI.html#method-i-best_moves","(scored_moves)",""],["best_score","ComputerAI","ComputerAI.html#method-i-best_score","(scores)",""],["board_graphic","State","State.html#method-i-board_graphic","(line_width)",""],["default_new","Game","Game.html#method-c-default_new","(type_1, type_2)",""],["full?","Board","Board.html#method-i-full-3F","()",""],["graphic","Board","Board.html#method-i-graphic","(line_width)",""],["look_ahead","ComputerAI","ComputerAI.html#method-i-look_ahead","(sight)",""],["new","Board","Board.html#method-c-new","(dimension)",""],["new","Game","Game.html#method-c-new","(p1, p2, board)",""],["new","Player","Player.html#method-c-new","(name, mark, type, sight)",""],["new","State","State.html#method-c-new","(current_player, board, last_move)",""],["play_with_foresight","ComputerAI","ComputerAI.html#method-i-play_with_foresight","(sight)",""],["random_move","ComputerAI","ComputerAI.html#method-i-random_move","(moves)",""],["score_and_revert","ComputerAI","ComputerAI.html#method-i-score_and_revert","(move, sight)",""],["square","Board","Board.html#method-i-square","(row, column)",""],["start","Game","Game.html#method-i-start","()",""],["tie?","State","State.html#method-i-tie-3F","()",""],["update","Board","Board.html#method-i-update","(row, column, mark)",""],["update_board","State","State.html#method-i-update_board","(move, mark)",""],["win?","State","State.html#method-i-win-3F","()",""],["README","","README_md.html","","<p>tic-tac-toe\n<p>Tic Tac Toe implementation in Ruby\n"]]}}